class DBHelper{static fetchRestaurants(t){openDatabase().then(e=>{let n=e.transaction("restaurants").objectStore("restaurants");n.getAll().then(o=>{0==o.length?fetch("http://localhost:1337/restaurants").then(t=>t.json()).then(o=>{o&&(n=e.transaction("restaurants","readwrite").objectStore("restaurants"),o.forEach(t=>{n.put(t,t.id)}),t(null,o))}).catch(e=>{t(e,null)}):t(null,o)})})}static fetchRestaurantById(t,e){openDatabase().then(n=>{let o=n.transaction("restaurants").objectStore("restaurants");o.get(t).then(r=>{r?e(null,r):fetch(`http://localhost:1337/restaurants/${t}`).then(t=>t.json()).then(r=>{r&&((o=n.transaction("restaurants","readwrite").objectStore("restaurants")).put(r,t),e(null,r))}).catch(t=>{e(t,"Restaurant does not exist")})})})}static fetchRestaurantByCuisine(t,e){DBHelper.fetchRestaurants((n,o)=>{if(n)e(n,null);else{const n=o.filter(e=>e.cuisine_type==t);e(null,n)}})}static fetchRestaurantByNeighborhood(t,e){DBHelper.fetchRestaurants((n,o)=>{if(n)e(n,null);else{const n=o.filter(e=>e.neighborhood==t);e(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(t,e,n){DBHelper.fetchRestaurants((o,r)=>{if(o)n(o,null);else{let o=r;"all"!=t&&(o=o.filter(e=>e.cuisine_type==t)),"all"!=e&&(o=o.filter(t=>t.neighborhood==e)),n(null,o)}})}static fetchNeighborhoods(t){DBHelper.fetchRestaurants((e,n)=>{if(e)t(e,null);else{const e=n.map((t,e)=>n[e].neighborhood),o=e.filter((t,n)=>e.indexOf(t)==n);t(null,o)}})}static fetchCuisines(t){DBHelper.fetchRestaurants((e,n)=>{if(e)t(e,null);else{const e=n.map((t,e)=>n[e].cuisine_type),o=e.filter((t,n)=>e.indexOf(t)==n);t(null,o)}})}static urlForRestaurant(t){return`./restaurant.html?id=${t.id}`}static imageUrlForRestaurant(t){return`/img/${DBHelper.imageNameForRestaurant(t)}-small.jpg`}static imageNameForRestaurant(t){return t.photograph?t.photograph:"default"}static mapMarkerForRestaurant(t,e){const n=new L.marker([t.latlng.lat,t.latlng.lng],{title:t.name,alt:t.name,url:DBHelper.urlForRestaurant(t)});return n.addTo(newMap),n}}function openDatabase(){return navigator.serviceWorker?idb.open("mws-restaurants",1,t=>t.createObjectStore("restaurants")):Promise.resolve()}DBHelper.imageUrlBasePath="/img/",function(){function t(t){return new Promise(function(e,n){t.onsuccess=function(){e(t.result)},t.onerror=function(){n(t.error)}})}function e(e,n,o){var r,a=new Promise(function(a,i){t(r=e[n].apply(e,o)).then(a,i)});return a.request=r,a}function n(t,e,n){n.forEach(function(n){Object.defineProperty(t.prototype,n,{get:function(){return this[e][n]},set:function(t){this[e][n]=t}})})}function o(t,n,o,r){r.forEach(function(r){r in o.prototype&&(t.prototype[r]=function(){return e(this[n],r,arguments)})})}function r(t,e,n,o){o.forEach(function(o){o in n.prototype&&(t.prototype[o]=function(){return this[e][o].apply(this[e],arguments)})})}function a(t,n,o,r){r.forEach(function(r){r in o.prototype&&(t.prototype[r]=function(){return t=this[n],(o=e(t,r,arguments)).then(function(t){if(t)return new s(t,o.request)});var t,o})})}function i(t){this._index=t}function s(t,e){this._cursor=t,this._request=e}function c(t){this._store=t}function u(t){this._tx=t,this.complete=new Promise(function(e,n){t.oncomplete=function(){e()},t.onerror=function(){n(t.error)},t.onabort=function(){n(t.error)}})}function l(t,e,n){this._db=t,this.oldVersion=e,this.transaction=new u(n)}function d(t){this._db=t}n(i,"_index",["name","keyPath","multiEntry","unique"]),o(i,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),a(i,"_index",IDBIndex,["openCursor","openKeyCursor"]),n(s,"_cursor",["direction","key","primaryKey","value"]),o(s,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(e){e in IDBCursor.prototype&&(s.prototype[e]=function(){var n=this,o=arguments;return Promise.resolve().then(function(){return n._cursor[e].apply(n._cursor,o),t(n._request).then(function(t){if(t)return new s(t,n._request)})})})}),c.prototype.createIndex=function(){return new i(this._store.createIndex.apply(this._store,arguments))},c.prototype.index=function(){return new i(this._store.index.apply(this._store,arguments))},n(c,"_store",["name","keyPath","indexNames","autoIncrement"]),o(c,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),a(c,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),r(c,"_store",IDBObjectStore,["deleteIndex"]),u.prototype.objectStore=function(){return new c(this._tx.objectStore.apply(this._tx,arguments))},n(u,"_tx",["objectStoreNames","mode"]),r(u,"_tx",IDBTransaction,["abort"]),l.prototype.createObjectStore=function(){return new c(this._db.createObjectStore.apply(this._db,arguments))},n(l,"_db",["name","version","objectStoreNames"]),r(l,"_db",IDBDatabase,["deleteObjectStore","close"]),d.prototype.transaction=function(){return new u(this._db.transaction.apply(this._db,arguments))},n(d,"_db",["name","version","objectStoreNames"]),r(d,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(t){[c,i].forEach(function(e){t in e.prototype&&(e.prototype[t.replace("open","iterate")]=function(){var e,n=(e=arguments,Array.prototype.slice.call(e)),o=n[n.length-1],r=this._store||this._index,a=r[t].apply(r,n.slice(0,-1));a.onsuccess=function(){o(a.result)}})})}),[i,c].forEach(function(t){t.prototype.getAll||(t.prototype.getAll=function(t,e){var n=this,o=[];return new Promise(function(r){n.iterateCursor(t,function(t){t?(o.push(t.value),void 0===e||o.length!=e?t.continue():r(o)):r(o)})})})});var p={open:function(t,n,o){var r=e(indexedDB,"open",[t,n]),a=r.request;return a&&(a.onupgradeneeded=function(t){o&&o(new l(a.result,t.oldVersion,a.transaction))}),r.then(function(t){return new d(t)})},delete:function(t){return e(indexedDB,"deleteDatabase",[t])}};"undefined"!=typeof module?(module.exports=p,module.exports.default=module.exports):self.idb=p}(),registerServiceWorker=(()=>{if(!navigator.serviceWorker)return;let t;navigator.serviceWorker.register("/sw.js").then(t=>{navigator.serviceWorker.controller&&(t.waiting?updateReady(t.waiting):t.installing?trackInstalling(t.installing):t.addEventListener("updatefound",()=>trackInstalling(t.installing)))}),navigator.serviceWorker.addEventListener("controllerchange",()=>{t||(window.location.reload(),t=!0)})}),updateReady=(t=>{Toast.create({text:"New version available.",button:"Refresh",callback:e=>{e.preventDefault(),t.postMessage({action:"skipWaiting"})}})}),trackInstalling=(t=>{t.addEventListener("statechange",()=>{"installed"===t.state&&updateReady(t)})}),function(t,e){try{"object"==typeof exports?module.exports=e():t.Toast=e()}catch(t){console.log("Isomorphic compatibility is not supported at this time for Toast.")}}(this,function(){"complete"===document.readyState?e():window.addEventListener("DOMContentLoaded",e),Toast={create:function(){console.error(["DOM has not finished loading.","\tInvoke create method when DOMs readyState is complete"].join("\n"))},setTimeout:function(){console.error(["DOM has not finished loading.","\tInvoke create method when DOMs readyState is complete"].join("\n"))},toasts:{}};var t=0;function e(){var e=document.createElement("div");e.id="toast-container",document.body.appendChild(e),Toast.create=function(e){var n=document.createElement("div");if(n.id=++t,n.id="toast-"+n.id,n.className="toast",e.title){var o=document.createElement("h4");o.className="toast-title",o.innerHTML=e.title,n.appendChild(o)}if(e.text){var r=document.createElement("p");r.className="toast-text",r.innerHTML=e.text,n.appendChild(r)}if(e.icon){var a=document.createElement("img");a.src=e.icon,a.className="toast-icon",n.appendChild(a)}if(e.button){var i=document.createElement("button");i.className="toast-button",i.innerHTML=e.button,n.appendChild(i)}function s(){document.getElementById("toast-container").removeChild(n),delete Toast.toasts[n.id]}return"function"==typeof e.callback&&n.addEventListener("click",e.callback),n.hide=function(){n.className+=" toast-fadeout",n.addEventListener("animationend",s,!1)},e.timeout&&setTimeout(n.hide,e.timeout),e.type&&(n.className+=" toast-"+e.type),n.addEventListener("click",n.hide),document.getElementById("toast-container").appendChild(n),Toast.toasts[n.id]=n,n},Toast.setTimeout=function(t,e){Toast.toasts[t]&&setTimeout(Toast.toasts[t].hide,e)}}return Toast});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
