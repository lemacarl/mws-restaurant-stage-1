let restaurants, neighborhoods, cuisines;
var newMap;
var markers = [];
/**
 * Fetch neighborhoods and cuisines as soon as the page is loaded.
 */

document.addEventListener('DOMContentLoaded', event => {
  registerServiceWorker();
  initMap(); // added 

  fetchNeighborhoods();
  fetchCuisines();
});
/**
 * Fetch all neighborhoods and set their HTML.
 */

fetchNeighborhoods = () => {
  DBHelper.fetchNeighborhoods((error, neighborhoods) => {
    if (error) {
      // Got an error
      console.error(error);
    } else {
      self.neighborhoods = neighborhoods;
      fillNeighborhoodsHTML();
    }
  });
};
/**
 * Set neighborhoods HTML.
 */


fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {
  const select = document.getElementById('neighborhoods-select');
  neighborhoods.forEach(neighborhood => {
    const option = document.createElement('option');
    option.innerHTML = neighborhood;
    option.value = neighborhood;
    select.append(option);
  });
};
/**
 * Fetch all cuisines and set their HTML.
 */


fetchCuisines = () => {
  DBHelper.fetchCuisines((error, cuisines) => {
    if (error) {
      // Got an error!
      console.error(error);
    } else {
      self.cuisines = cuisines;
      fillCuisinesHTML();
    }
  });
};
/**
 * Set cuisines HTML.
 */


fillCuisinesHTML = (cuisines = self.cuisines) => {
  const select = document.getElementById('cuisines-select');
  cuisines.forEach(cuisine => {
    const option = document.createElement('option');
    option.innerHTML = cuisine;
    option.value = cuisine;
    select.append(option);
  });
};
/**
 * Initialize leaflet map, called from HTML.
 */


initMap = () => {
  self.newMap = L.map('map', {
    center: [40.722216, -73.987501],
    zoom: 12,
    scrollWheelZoom: false
  });
  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {
    mapboxToken: 'pk.eyJ1IjoibGVtYSIsImEiOiJjamt0YXVla2MwM3NjM3dvZHQ0NDIwZmVpIn0.pOEFaPY6enCchIG29Lo2SQ',
    maxZoom: 18,
    attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, ' + '<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' + 'Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
    id: 'mapbox.streets'
  }).addTo(newMap);
  updateRestaurants();
};
/* window.initMap = () => {
  let loc = {
    lat: 40.722216,
    lng: -73.987501
  };
  self.map = new google.maps.Map(document.getElementById('map'), {
    zoom: 12,
    center: loc,
    scrollwheel: false
  });
  updateRestaurants();
} */

/**
 * Update page and map for current restaurants.
 */


updateRestaurants = () => {
  const cSelect = document.getElementById('cuisines-select');
  const nSelect = document.getElementById('neighborhoods-select');
  const cIndex = cSelect.selectedIndex;
  const nIndex = nSelect.selectedIndex;
  const cuisine = cSelect[cIndex].value;
  const neighborhood = nSelect[nIndex].value;
  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {
    if (error) {
      // Got an error!
      console.error(error);
    } else {
      resetRestaurants(restaurants);
      fillRestaurantsHTML();
    }
  });
};
/**
 * Clear current restaurants, their HTML and remove their map markers.
 */


resetRestaurants = restaurants => {
  // Remove all restaurants
  self.restaurants = [];
  const ul = document.getElementById('restaurants-list');
  ul.innerHTML = ''; // Remove all map markers

  if (self.markers) {
    self.markers.forEach(marker => marker.remove());
  }

  self.markers = [];
  self.restaurants = restaurants;
};
/**
 * Create all restaurants HTML and add them to the webpage.
 */


fillRestaurantsHTML = (restaurants = self.restaurants) => {
  const ul = document.getElementById('restaurants-list');
  restaurants.forEach(restaurant => {
    ul.append(createRestaurantHTML(restaurant));
  });
  addMarkersToMap();
};
/**
 * Create restaurant HTML.
 */


createRestaurantHTML = restaurant => {
  const li = document.createElement('li');
  const picture = document.createElement('picture');
  picture.className = 'restaurant-picture';
  li.append(picture);
  const src1 = document.createElement('source');
  src1.media = "(min-width: 750px)";
  src1.srcset = `${DBHelper.imageUrlBasePath}${DBHelper.imageNameForRestaurant(restaurant)}-800_large_1x.jpg 1x`;
  src1.srcset += `,${DBHelper.imageUrlBasePath}${DBHelper.imageNameForRestaurant(restaurant)}-1200_large_2x.jpg 2x`;
  picture.append(src1);
  const src2 = document.createElement('source');
  src2.media = "(min-width: 500px)";
  src2.srcset = `${DBHelper.imageUrlBasePath}${DBHelper.imageNameForRestaurant(restaurant)}-medium.jpg`;
  picture.append(src2);
  const image = document.createElement('img');
  image.className = 'restaurant-img';
  image.src = DBHelper.imageUrlForRestaurant(restaurant);
  image.alt = "Image of the restaurant " + restaurant.name;
  picture.append(image);
  const container = document.createElement('div');
  container.className = 'restaurant-container';
  li.append(container);
  const content = document.createElement('div');
  content.className = "restaurant-container__content";
  container.append(content);
  const name = document.createElement('h3');
  name.innerHTML = restaurant.name;
  content.append(name);
  const neighborhood = document.createElement('p');
  neighborhood.innerHTML = restaurant.neighborhood;
  content.append(neighborhood);
  const address = document.createElement('p');
  address.innerHTML = restaurant.address;
  content.append(address);
  const more = document.createElement('a');
  more.innerHTML = 'View Details';
  more.setAttribute('aria-label', 'View details of the restaurant ' + restaurant.name);
  more.href = DBHelper.urlForRestaurant(restaurant);
  container.append(more);
  return li;
};
/**
 * Add markers for current restaurants to the map.
 */


addMarkersToMap = (restaurants = self.restaurants) => {
  restaurants.forEach(restaurant => {
    // Add marker to the map
    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.newMap);
    marker.on("click", onClick);

    function onClick() {
      window.location.href = marker.options.url;
    }

    self.markers.push(marker);
  });
};
/* addMarkersToMap = (restaurants = self.restaurants) => {
  restaurants.forEach(restaurant => {
    // Add marker to the map
    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);
    google.maps.event.addListener(marker, 'click', () => {
      window.location.href = marker.url
    });
    self.markers.push(marker);
  });
} */
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsicmVzdGF1cmFudHMiLCJuZWlnaGJvcmhvb2RzIiwiY3Vpc2luZXMiLCJuZXdNYXAiLCJtYXJrZXJzIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJyZWdpc3RlclNlcnZpY2VXb3JrZXIiLCJpbml0TWFwIiwiZmV0Y2hOZWlnaGJvcmhvb2RzIiwiZmV0Y2hDdWlzaW5lcyIsIkRCSGVscGVyIiwiZXJyb3IiLCJjb25zb2xlIiwic2VsZiIsImZpbGxOZWlnaGJvcmhvb2RzSFRNTCIsInNlbGVjdCIsImdldEVsZW1lbnRCeUlkIiwiZm9yRWFjaCIsIm5laWdoYm9yaG9vZCIsIm9wdGlvbiIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJ2YWx1ZSIsImFwcGVuZCIsImZpbGxDdWlzaW5lc0hUTUwiLCJjdWlzaW5lIiwiTCIsIm1hcCIsImNlbnRlciIsInpvb20iLCJzY3JvbGxXaGVlbFpvb20iLCJ0aWxlTGF5ZXIiLCJtYXBib3hUb2tlbiIsIm1heFpvb20iLCJhdHRyaWJ1dGlvbiIsImlkIiwiYWRkVG8iLCJ1cGRhdGVSZXN0YXVyYW50cyIsImNTZWxlY3QiLCJuU2VsZWN0IiwiY0luZGV4Iiwic2VsZWN0ZWRJbmRleCIsIm5JbmRleCIsImZldGNoUmVzdGF1cmFudEJ5Q3Vpc2luZUFuZE5laWdoYm9yaG9vZCIsInJlc2V0UmVzdGF1cmFudHMiLCJmaWxsUmVzdGF1cmFudHNIVE1MIiwidWwiLCJtYXJrZXIiLCJyZW1vdmUiLCJyZXN0YXVyYW50IiwiY3JlYXRlUmVzdGF1cmFudEhUTUwiLCJhZGRNYXJrZXJzVG9NYXAiLCJsaSIsInBpY3R1cmUiLCJjbGFzc05hbWUiLCJzcmMxIiwibWVkaWEiLCJzcmNzZXQiLCJpbWFnZVVybEJhc2VQYXRoIiwiaW1hZ2VOYW1lRm9yUmVzdGF1cmFudCIsInNyYzIiLCJpbWFnZSIsInNyYyIsImltYWdlVXJsRm9yUmVzdGF1cmFudCIsImFsdCIsIm5hbWUiLCJjb250YWluZXIiLCJjb250ZW50IiwiYWRkcmVzcyIsIm1vcmUiLCJzZXRBdHRyaWJ1dGUiLCJocmVmIiwidXJsRm9yUmVzdGF1cmFudCIsIm1hcE1hcmtlckZvclJlc3RhdXJhbnQiLCJvbiIsIm9uQ2xpY2siLCJ3aW5kb3ciLCJsb2NhdGlvbiIsIm9wdGlvbnMiLCJ1cmwiLCJwdXNoIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxXQUFKLEVBQ0VDLGFBREYsRUFFRUMsUUFGRjtBQUdBLElBQUlDLE1BQUo7QUFDQSxJQUFJQyxPQUFPLEdBQUcsRUFBZDtBQUVBOzs7O0FBR0FDLFFBQVEsQ0FBQ0MsZ0JBQVQsQ0FBMEIsa0JBQTFCLEVBQStDQyxLQUFELElBQVc7QUFDdkRDLEVBQUFBLHFCQUFxQjtBQUNyQkMsRUFBQUEsT0FBTyxHQUZnRCxDQUU1Qzs7QUFDWEMsRUFBQUEsa0JBQWtCO0FBQ2xCQyxFQUFBQSxhQUFhO0FBQ2QsQ0FMRDtBQU9BOzs7O0FBR0FELGtCQUFrQixHQUFHLE1BQU07QUFDekJFLEVBQUFBLFFBQVEsQ0FBQ0Ysa0JBQVQsQ0FBNEIsQ0FBQ0csS0FBRCxFQUFRWixhQUFSLEtBQTBCO0FBQ3BELFFBQUlZLEtBQUosRUFBVztBQUFFO0FBQ1hDLE1BQUFBLE9BQU8sQ0FBQ0QsS0FBUixDQUFjQSxLQUFkO0FBQ0QsS0FGRCxNQUVPO0FBQ0xFLE1BQUFBLElBQUksQ0FBQ2QsYUFBTCxHQUFxQkEsYUFBckI7QUFDQWUsTUFBQUEscUJBQXFCO0FBQ3RCO0FBQ0YsR0FQRDtBQVFELENBVEQ7QUFXQTs7Ozs7QUFHQUEscUJBQXFCLEdBQUcsQ0FBQ2YsYUFBYSxHQUFHYyxJQUFJLENBQUNkLGFBQXRCLEtBQXdDO0FBQzlELFFBQU1nQixNQUFNLEdBQUdaLFFBQVEsQ0FBQ2EsY0FBVCxDQUF3QixzQkFBeEIsQ0FBZjtBQUNBakIsRUFBQUEsYUFBYSxDQUFDa0IsT0FBZCxDQUFzQkMsWUFBWSxJQUFJO0FBQ3BDLFVBQU1DLE1BQU0sR0FBR2hCLFFBQVEsQ0FBQ2lCLGFBQVQsQ0FBdUIsUUFB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QWdELEVBQUFBLElBQUksQ0FBQ0MsWUFBTCxDQUFrQixZQUFsQixFQUFnQyxvQ0FBb0NyQixVQUFVLENBQUNnQixJQUEvRTtBQUNBSSxFQUFBQSxJQUFJLENBQUNFLElBQUwsR0FBWTdELFFBQVEsQ0FBQzhELGdCQUFULENBQTBCdkIsVUFBMUIsQ0FBWjtBQUNBaUIsRUFBQUEsU0FBUyxDQUFDM0MsTUFBVixDQUFpQjhDLElBQWpCO0FBRUEsU0FBT2pCLEVBQVA7QUFDRCxDQW5ERDtBQXFEQTs7Ozs7QUFHQUQsZUFBZSxHQUFHLENBQUNyRCxXQUFXLEdBQUdlLElBQUksQ0FBQ2YsV0FBcEIsS0FBb0M7QUFDcERBLEVBQUFBLFdBQVcsQ0FBQ21CLE9BQVosQ0FBb0JnQyxVQUFVLElBQUk7QUFDaEM7QUFDQSxVQUFNRixNQUFNLEdBQUdyQyxRQUFRLENBQUMrRCxzQkFBVCxDQUFnQ3hCLFVBQWhDLEVBQTRDcEMsSUFBSSxDQUFDWixNQUFqRCxDQUFmO0FBQ0E4QyxJQUFBQSxNQUFNLENBQUMyQixFQUFQLENBQVUsT0FBVixFQUFtQkMsT0FBbkI7O0FBQ0EsYUFBU0EsT0FBVCxHQUFtQjtBQUNqQkMsTUFBQUEsTUFBTSxDQUFDQyxRQUFQLENBQWdCTixJQUFoQixHQUF1QnhCLE1BQU0sQ0FBQytCLE9BQVAsQ0FBZUMsR0FBdEM7QUFDRDs7QUFDRGxFLElBQUFBLElBQUksQ0FBQ1gsT0FBTCxDQUFhOEUsSUFBYixDQUFrQmpDLE1BQWxCO0FBQ0QsR0FSRDtBQVVELENBWEQ7QUFZQSIsInNvdXJjZXNDb250ZW50IjpbImxldCByZXN0YXVyYW50cyxcclxuICBuZWlnaGJvcmhvb2RzLFxyXG4gIGN1aXNpbmVzXHJcbnZhciBuZXdNYXBcclxudmFyIG1hcmtlcnMgPSBbXVxyXG5cclxuLyoqXHJcbiAqIEZldGNoIG5laWdoYm9yaG9vZHMgYW5kIGN1aXNpbmVzIGFzIHNvb24gYXMgdGhlIHBhZ2UgaXMgbG9hZGVkLlxyXG4gKi9cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIChldmVudCkgPT4ge1xyXG4gIHJlZ2lzdGVyU2VydmljZVdvcmtlcigpO1xyXG4gIGluaXRNYXAoKTsgLy8gYWRkZWQgXHJcbiAgZmV0Y2hOZWlnaGJvcmhvb2RzKCk7XHJcbiAgZmV0Y2hDdWlzaW5lcygpO1xyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBGZXRjaCBhbGwgbmVpZ2hib3Job29kcyBhbmQgc2V0IHRoZWlyIEhUTUwuXHJcbiAqL1xyXG5mZXRjaE5laWdoYm9yaG9vZHMgPSAoKSA9PiB7XHJcbiAgREJIZWxwZXIuZmV0Y2hOZWlnaGJvcmhvb2RzKChlcnJvciwgbmVpZ2hib3Job29kcykgPT4ge1xyXG4gICAgaWYgKGVycm9yKSB7IC8vIEdvdCBhbiBlcnJvclxyXG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHNlbGYubmVpZ2hib3Job29kcyA9IG5laWdoYm9yaG9vZHM7XHJcbiAgICAgIGZpbGxOZWlnaGJvcmhvb2RzSFRNTCgpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG4vKipcclxuICogU2V0IG5laWdoYm9yaG9vZHMgSFRNTC5cclxuICovXHJcbmZpbGxOZWlnaGJvcmhvb2RzSFRNTCA9IChuZWlnaGJvcmhvb2RzID0gc2VsZi5uZWlnaGJvcmhvb2RzKSA9PiB7XHJcbiAgY29uc3Qgc2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25laWdoYm9yaG9vZHMtc2VsZWN0Jyk7XHJcbiAgbmVpZ2hib3Job29kcy5mb3JFYWNoKG5laWdoYm9yaG9vZCA9PiB7XHJcbiAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcclxuICAgIG9wdGlvbi5pbm5lckhUTUwgPSBuZWlnaGJvcmhvb2Q7XHJcbiAgICBvcHRpb24udmFsdWUgPSBuZWlnaGJvcmhvb2Q7XHJcbiAgICBzZWxlY3QuYXBwZW5kKG9wdGlvbik7XHJcbiAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBGZXRjaCBhbGwgY3Vpc2luZXMgYW5kIHNldCB0aGVpciBIVE1MLlxyXG4gKi9cclxuZmV0Y2hDdWlzaW5lcyA9ICgpID0+IHtcclxuICBEQkhlbHBlci5mZXRjaEN1aXNpbmVzKChlcnJvciwgY3Vpc2luZXMpID0+IHtcclxuICAgIGlmIChlcnJvcikgeyAvLyBHb3QgYW4gZXJyb3IhXHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc2VsZi5jdWlzaW5lcyA9IGN1aXNpbmVzO1xyXG4gICAgICBmaWxsQ3Vpc2luZXNIVE1MKCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgY3Vpc2luZXMgSFRNTC5cclxuICovXHJcbmZpbGxDdWlzaW5lc0hUTUwgPSAoY3Vpc2luZXMgPSBzZWxmLmN1aXNpbmVzKSA9PiB7XHJcbiAgY29uc3Qgc2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2N1aXNpbmVzLXNlbGVjdCcpO1xyXG5cclxuICBjdWlzaW5lcy5mb3JFYWNoKGN1aXNpbmUgPT4ge1xyXG4gICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XHJcbiAgICBvcHRpb24uaW5uZXJIVE1MID0gY3Vpc2luZTtcclxuICAgIG9wdGlvbi52YWx1ZSA9IGN1aXNpbmU7XHJcbiAgICBzZWxlY3QuYXBwZW5kKG9wdGlvbik7XHJcbiAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbml0aWFsaXplIGxlYWZsZXQgbWFwLCBjYWxsZWQgZnJvbSBIVE1MLlxyXG4gKi9cclxuaW5pdE1hcCA9ICgpID0+IHtcclxuICBzZWxmLm5ld01hcCA9IEwubWFwKCdtYXAnLCB7XHJcbiAgICAgICAgY2VudGVyOiBbNDAuNzIyMjE2LCAtNzMuOTg3NTAxXSxcclxuICAgICAgICB6b29tOiAxMixcclxuICAgICAgICBzY3JvbGxXaGVlbFpvb206IGZhbHNlXHJcbiAgICAgIH0pO1xyXG4gIEwudGlsZUxheWVyKCdodHRwczovL2FwaS50aWxlcy5tYXBib3guY29tL3Y0L3tpZH0ve3p9L3t4fS97eX0uanBnNzA/YWNjZXNzX3Rva2VuPXttYXBib3hUb2tlbn0nLCB7XHJcbiAgICBtYXBib3hUb2tlbjogJ3BrLmV5SjFJam9pYkdWdFlTSXNJbUVpT2lKamFtdDBZWFZsYTJNd00zTmpNM2R2WkhRME5ESXdabVZwSW4wLnBPRUZhUFk2ZW5DY2hJRzI5TG8yU1EnLFxyXG4gICAgbWF4Wm9vbTogMTgsXHJcbiAgICBhdHRyaWJ1dGlvbjogJ01hcCBkYXRhICZjb3B5OyA8YSBocmVmPVwiaHR0cHM6Ly93d3cub3BlbnN0cmVldG1hcC5vcmcvXCI+T3BlblN0cmVldE1hcDwvYT4gY29udHJpYnV0b3JzLCAnICtcclxuICAgICAgJzxhIGhyZWY9XCJodHRwczovL2NyZWF0aXZlY29tbW9ucy5vcmcvbGljZW5zZXMvYnktc2EvMi4wL1wiPkNDLUJZLVNBPC9hPiwgJyArXHJcbiAgICAgICdJbWFnZXJ5IMKpIDxhIGhyZWY9XCJodHRwczovL3d3dy5tYXBib3guY29tL1wiPk1hcGJveDwvYT4nLFxyXG4gICAgaWQ6ICdtYXBib3guc3RyZWV0cydcclxuICB9KS5hZGRUbyhuZXdNYXApO1xyXG5cclxuICB1cGRhdGVSZXN0YXVyYW50cygpO1xyXG59XHJcbi8qIHdpbmRvdy5pbml0TWFwID0gKCkgPT4ge1xyXG4gIGxldCBsb2MgPSB7XHJcbiAgICBsYXQ6IDQwLjcyMjIxNixcclxuICAgIGxuZzogLTczLjk4NzUwMVxyXG4gIH07XHJcbiAgc2VsZi5tYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXAnKSwge1xyXG4gICAgem9vbTogMTIsXHJcbiAgICBjZW50ZXI6IGxvYyxcclxuICAgIHNjcm9sbHdoZWVsOiBmYWxzZVxyXG4gIH0pO1xyXG4gIHVwZGF0ZVJlc3RhdXJhbnRzKCk7XHJcbn0gKi9cclxuXHJcbi8qKlxyXG4gKiBVcGRhdGUgcGFnZSBhbmQgbWFwIGZvciBjdXJyZW50IHJlc3RhdXJhbnRzLlxyXG4gKi9cclxudXBkYXRlUmVzdGF1cmFudHMgPSAoKSA9PiB7XHJcbiAgY29uc3QgY1NlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjdWlzaW5lcy1zZWxlY3QnKTtcclxuICBjb25zdCBuU2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25laWdoYm9yaG9vZHMtc2VsZWN0Jyk7XHJcblxyXG4gIGNvbnN0IGNJbmRleCA9IGNTZWxlY3Quc2VsZWN0ZWRJbmRleDtcclxuICBjb25zdCBuSW5kZXggPSBuU2VsZWN0LnNlbGVjdGVkSW5kZXg7XHJcblxyXG4gIGNvbnN0IGN1aXNpbmUgPSBjU2VsZWN0W2NJbmRleF0udmFsdWU7XHJcbiAgY29uc3QgbmVpZ2hib3Job29kID0gblNlbGVjdFtuSW5kZXhdLnZhbHVlO1xyXG5cclxuICBEQkhlbHBlci5mZXRjaFJlc3RhdXJhbnRCeUN1aXNpbmVBbmROZWlnaGJvcmhvb2QoY3Vpc2luZSwgbmVpZ2hib3Job29kLCAoZXJyb3IsIHJlc3RhdXJhbnRzKSA9PiB7XHJcbiAgICBpZiAoZXJyb3IpIHsgLy8gR290IGFuIGVycm9yIVxyXG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJlc2V0UmVzdGF1cmFudHMocmVzdGF1cmFudHMpO1xyXG4gICAgICBmaWxsUmVzdGF1cmFudHNIVE1MKCk7XHJcbiAgICB9XHJcbiAgfSlcclxufVxyXG5cclxuLyoqXHJcbiAqIENsZWFyIGN1cnJlbnQgcmVzdGF1cmFudHMsIHRoZWlyIEhUTUwgYW5kIHJlbW92ZSB0aGVpciBtYXAgbWFya2Vycy5cclxuICovXHJcbnJlc2V0UmVzdGF1cmFudHMgPSAocmVzdGF1cmFudHMpID0+IHtcclxuICAvLyBSZW1vdmUgYWxsIHJlc3RhdXJhbnRzXHJcbiAgc2VsZi5yZXN0YXVyYW50cyA9IFtdO1xyXG4gIGNvbnN0IHVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc3RhdXJhbnRzLWxpc3QnKTtcclxuICB1bC5pbm5lckhUTUwgPSAnJztcclxuXHJcbiAgLy8gUmVtb3ZlIGFsbCBtYXAgbWFya2Vyc1xyXG4gIGlmIChzZWxmLm1hcmtlcnMpIHtcclxuICAgIHNlbGYubWFya2Vycy5mb3JFYWNoKG1hcmtlciA9PiBtYXJrZXIucmVtb3ZlKCkpO1xyXG4gIH1cclxuICBzZWxmLm1hcmtlcnMgPSBbXTtcclxuICBzZWxmLnJlc3RhdXJhbnRzID0gcmVzdGF1cmFudHM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUgYWxsIHJlc3RhdXJhbnRzIEhUTUwgYW5kIGFkZCB0aGVtIHRvIHRoZSB3ZWJwYWdlLlxyXG4gKi9cclxuZmlsbFJlc3RhdXJhbnRzSFRNTCA9IChyZXN0YXVyYW50cyA9IHNlbGYucmVzdGF1cmFudHMpID0+IHtcclxuICBjb25zdCB1bCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXN0YXVyYW50cy1saXN0Jyk7XHJcbiAgcmVzdGF1cmFudHMuZm9yRWFjaChyZXN0YXVyYW50ID0+IHtcclxuICAgIHVsLmFwcGVuZChjcmVhdGVSZXN0YXVyYW50SFRNTChyZXN0YXVyYW50KSk7XHJcbiAgfSk7XHJcbiAgYWRkTWFya2Vyc1RvTWFwKCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUgcmVzdGF1cmFudCBIVE1MLlxyXG4gKi9cclxuY3JlYXRlUmVzdGF1cmFudEhUTUwgPSAocmVzdGF1cmFudCkgPT4ge1xyXG4gIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcclxuXHJcbiAgY29uc3QgcGljdHVyZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3BpY3R1cmUnKTtcclxuICBwaWN0dXJlLmNsYXNzTmFtZSA9ICdyZXN0YXVyYW50LXBpY3R1cmUnO1xyXG4gIGxpLmFwcGVuZChwaWN0dXJlKTtcclxuXHJcbiAgY29uc3Qgc3JjMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NvdXJjZScpO1xyXG4gIHNyYzEubWVkaWEgPSBcIihtaW4td2lkdGg6IDc1MHB4KVwiXHJcbiAgc3JjMS5zcmNzZXQgPSBgJHtEQkhlbHBlci5pbWFnZVVybEJhc2VQYXRofSR7REJIZWxwZXIuaW1hZ2VOYW1lRm9yUmVzdGF1cmFudChyZXN0YXVyYW50KX0tODAwX2xhcmdlXzF4LmpwZyAxeGA7XHJcbiAgc3JjMS5zcmNzZXQgKz0gYCwke0RCSGVscGVyLmltYWdlVXJsQmFzZVBhdGh9JHtEQkhlbHBlci5pbWFnZU5hbWVGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpfS0xMjAwX2xhcmdlXzJ4LmpwZyAyeGA7XHJcbiAgcGljdHVyZS5hcHBlbmQoc3JjMSk7XHJcblxyXG4gIGNvbnN0IHNyYzIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzb3VyY2UnKTtcclxuICBzcmMyLm1lZGlhID0gXCIobWluLXdpZHRoOiA1MDBweClcIlxyXG4gIHNyYzIuc3Jjc2V0ID0gYCR7REJIZWxwZXIuaW1hZ2VVcmxCYXNlUGF0aH0ke0RCSGVscGVyLmltYWdlTmFtZUZvclJlc3RhdXJhbnQocmVzdGF1cmFudCl9LW1lZGl1bS5qcGdgO1xyXG4gIHBpY3R1cmUuYXBwZW5kKHNyYzIpO1xyXG5cclxuICBjb25zdCBpbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xyXG4gIGltYWdlLmNsYXNzTmFtZSA9ICdyZXN0YXVyYW50LWltZyc7XHJcbiAgaW1hZ2Uuc3JjID0gREJIZWxwZXIuaW1hZ2VVcmxGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpO1xyXG4gIGltYWdlLmFsdCA9IFwiSW1hZ2Ugb2YgdGhlIHJlc3RhdXJhbnQgXCIgKyByZXN0YXVyYW50Lm5hbWU7XHJcbiAgcGljdHVyZS5hcHBlbmQoaW1hZ2UpO1xyXG5cclxuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICBjb250YWluZXIuY2xhc3NOYW1lID0gJ3Jlc3RhdXJhbnQtY29udGFpbmVyJztcclxuICBsaS5hcHBlbmQoY29udGFpbmVyKTtcclxuXHJcbiAgY29uc3QgY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gIGNvbnRlbnQuY2xhc3NOYW1lID0gXCJyZXN0YXVyYW50LWNvbnRhaW5lcl9fY29udGVudFwiO1xyXG4gIGNvbnRhaW5lci5hcHBlbmQoY29udGVudCk7XHJcblxyXG4gIGNvbnN0IG5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMycpO1xyXG4gIG5hbWUuaW5uZXJIVE1MID0gcmVzdGF1cmFudC5uYW1lO1xyXG4gIGNvbnRlbnQuYXBwZW5kKG5hbWUpO1xyXG5cclxuICBjb25zdCBuZWlnaGJvcmhvb2QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcbiAgbmVpZ2hib3Job29kLmlubmVySFRNTCA9IHJlc3RhdXJhbnQubmVpZ2hib3Job29kO1xyXG4gIGNvbnRlbnQuYXBwZW5kKG5laWdoYm9yaG9vZCk7XHJcblxyXG4gIGNvbnN0IGFkZHJlc3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcbiAgYWRkcmVzcy5pbm5lckhUTUwgPSByZXN0YXVyYW50LmFkZHJlc3M7XHJcbiAgY29udGVudC5hcHBlbmQoYWRkcmVzcyk7XHJcblxyXG4gIGNvbnN0IG1vcmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XHJcbiAgbW9yZS5pbm5lckhUTUwgPSAnVmlldyBEZXRhaWxzJztcclxuICBtb3JlLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsICdWaWV3IGRldGFpbHMgb2YgdGhlIHJlc3RhdXJhbnQgJyArIHJlc3RhdXJhbnQubmFtZSk7XHJcbiAgbW9yZS5ocmVmID0gREJIZWxwZXIudXJsRm9yUmVzdGF1cmFudChyZXN0YXVyYW50KTtcclxuICBjb250YWluZXIuYXBwZW5kKG1vcmUpXHJcblxyXG4gIHJldHVybiBsaVxyXG59XHJcblxyXG4vKipcclxuICogQWRkIG1hcmtlcnMgZm9yIGN1cnJlbnQgcmVzdGF1cmFudHMgdG8gdGhlIG1hcC5cclxuICovXHJcbmFkZE1hcmtlcnNUb01hcCA9IChyZXN0YXVyYW50cyA9IHNlbGYucmVzdGF1cmFudHMpID0+IHtcclxuICByZXN0YXVyYW50cy5mb3JFYWNoKHJlc3RhdXJhbnQgPT4ge1xyXG4gICAgLy8gQWRkIG1hcmtlciB0byB0aGUgbWFwXHJcbiAgICBjb25zdCBtYXJrZXIgPSBEQkhlbHBlci5tYXBNYXJrZXJGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQsIHNlbGYubmV3TWFwKTtcclxuICAgIG1hcmtlci5vbihcImNsaWNrXCIsIG9uQ2xpY2spO1xyXG4gICAgZnVuY3Rpb24gb25DbGljaygpIHtcclxuICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBtYXJrZXIub3B0aW9ucy51cmw7XHJcbiAgICB9XHJcbiAgICBzZWxmLm1hcmtlcnMucHVzaChtYXJrZXIpO1xyXG4gIH0pO1xyXG5cclxufSBcclxuLyogYWRkTWFya2Vyc1RvTWFwID0gKHJlc3RhdXJhbnRzID0gc2VsZi5yZXN0YXVyYW50cykgPT4ge1xyXG4gIHJlc3RhdXJhbnRzLmZvckVhY2gocmVzdGF1cmFudCA9PiB7XHJcbiAgICAvLyBBZGQgbWFya2VyIHRvIHRoZSBtYXBcclxuICAgIGNvbnN0IG1hcmtlciA9IERCSGVscGVyLm1hcE1hcmtlckZvclJlc3RhdXJhbnQocmVzdGF1cmFudCwgc2VsZi5tYXApO1xyXG4gICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFya2VyLCAnY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gbWFya2VyLnVybFxyXG4gICAgfSk7XHJcbiAgICBzZWxmLm1hcmtlcnMucHVzaChtYXJrZXIpO1xyXG4gIH0pO1xyXG59ICovIl0sImZpbGUiOiJtYWluLmpzIn0=
