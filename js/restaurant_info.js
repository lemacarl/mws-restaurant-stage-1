let restaurant;
var newMap;
/**
 * Initialize map as soon as the page is loaded.
 */

document.addEventListener('DOMContentLoaded', event => {
  initMap();
  registerServiceWorker();
});
/**
 * Initialize leaflet map
 */

initMap = () => {
  fetchRestaurantFromURL((error, restaurant) => {
    if (error) {
      // Got an error!
      console.error(error);
    } else {
      self.newMap = L.map('map', {
        center: [restaurant.latlng.lat, restaurant.latlng.lng],
        zoom: 16,
        scrollWheelZoom: false
      });
      L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {
        mapboxToken: 'pk.eyJ1IjoibGVtYSIsImEiOiJjamt0YXVla2MwM3NjM3dvZHQ0NDIwZmVpIn0.pOEFaPY6enCchIG29Lo2SQ',
        maxZoom: 18,
        attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, ' + '<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' + 'Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
        id: 'mapbox.streets'
      }).addTo(newMap);
      fillBreadcrumb();
      DBHelper.mapMarkerForRestaurant(self.restaurant, self.newMap);
    }
  });
};
/**
 * Get current restaurant from page URL.
 */


fetchRestaurantFromURL = callback => {
  if (self.restaurant) {
    // restaurant already fetched!
    callback(null, self.restaurant);
    return;
  }

  const id = getParameterByName('id');

  if (!id) {
    // no id found in URL
    error = 'No restaurant id in URL';
    callback(error, null);
  } else {
    DBHelper.fetchRestaurantById(id, (error, restaurant) => {
      self.restaurant = restaurant;

      if (!restaurant) {
        console.error(error);
        return;
      }

      fillRestaurantHTML();
      callback(null, restaurant);
    });
  }
};
/**
 * Create restaurant HTML and add it to the webpage
 */


fillRestaurantHTML = (restaurant = self.restaurant) => {
  const name = document.getElementById('restaurant-name');
  name.innerHTML = restaurant.name;
  const address = document.getElementById('restaurant-address');
  address.innerHTML = restaurant.address;
  const picture = document.getElementById('restaurant-picture');
  picture.className = 'restaurant-picture';
  const src1 = document.getElementById('source-1');
  src1.media = "(min-width: 750px)";
  src1.srcset = `${DBHelper.imageUrlBasePath}${DBHelper.imageNameForRestaurant(restaurant)}-800_large_1x.jpg 1x`;
  src1.srcset += `,${DBHelper.imageUrlBasePath}${DBHelper.imageNameForRestaurant(restaurant)}-1200_large_2x.jpg 2x`;
  const src2 = document.getElementById('source-2');
  src2.media = "(min-width: 500px)";
  src2.srcset = `${DBHelper.imageUrlBasePath}${DBHelper.imageNameForRestaurant(restaurant)}-medium.jpg`;
  const image = document.getElementById('restaurant-img');
  image.className = 'restaurant-img';
  image.src = DBHelper.imageUrlForRestaurant(restaurant);
  image.alt = "Image of the restaurant " + restaurant.name;
  const cuisine = document.getElementById('restaurant-cuisine');
  cuisine.innerHTML = restaurant.cuisine_type; // fill operating hours

  if (restaurant.operating_hours) {
    fillRestaurantHoursHTML();
  } // fill reviews


  fillReviewsHTML();
};
/**
 * Create restaurant operating hours HTML table and add it to the webpage.
 */


fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {
  const hours = document.getElementById('restaurant-hours');

  for (let key in operatingHours) {
    const row = document.createElement('tr');
    const day = document.createElement('td');
    day.innerHTML = key;
    row.appendChild(day);
    const time = document.createElement('td');
    time.innerHTML = operatingHours[key];
    row.appendChild(time);
    hours.appendChild(row);
  }
};
/**
 * Create all reviews HTML and add them to the webpage.
 */


fillReviewsHTML = (reviews = self.restaurant.reviews) => {
  const container = document.getElementById('reviews-container');
  const reviewsMsg = document.getElementById('reviews-message');

  if (!reviews) {
    reviewsMsg.innerHTML = 'No reviews yet!';
    return;
  }

  const ul = document.getElementById('reviews-list');
  ul.innerHTML = '';
  reviewsMsg.innerHTML = '';
  reviews.forEach(review => {
    ul.appendChild(createReviewHTML(review));
  });
};
/**
 * Create review HTML and add it to the webpage.
 */


createReviewHTML = review => {
  const li = document.createElement('li');
  const div = document.createElement('div');
  div.className = "review-header";
  li.appendChild(div);
  const name = document.createElement('h3');
  name.innerHTML = review.name;
  div.appendChild(name);
  const date = document.createElement('span');
  date.innerHTML = review.date;
  date.className = "review-date";
  div.appendChild(date);
  const body = document.createElement('div');
  body.className = "review-body";
  li.appendChild(body);
  const rating = document.createElement('span');
  rating.innerHTML = `Rating: ${review.rating}`;
  rating.className = "review-rating";
  body.appendChild(rating);
  const comments = document.createElement('p');
  comments.innerHTML = review.comments;
  body.appendChild(comments);
  return li;
};
/**
 * Add restaurant name to the breadcrumb navigation menu
 */


fillBreadcrumb = (restaurant = self.restaurant) => {
  const breadcrumb = document.getElementById('breadcrumb');
  const li = document.createElement('li');
  li.innerHTML = restaurant.name;
  breadcrumb.appendChild(li);
};
/**
 * Get a parameter by name from page URL.
 */


getParameterByName = (name, url) => {
  if (!url) url = window.location.href;
  name = name.replace(/[\[\]]/g, '\\$&');
  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),
        results = regex.exec(url);
  if (!results) return null;
  if (!results[2]) return '';
  return decodeURIComponent(results[2].replace(/\+/g, ' '));
};
/**
 * Expand add review  
 */


const addReviewButton = document.getElementById('add-review');
addReviewButton.addEventListener('click', e => {
  e.preventDefault();
  const form = document.getElementById('submit-review');
  form.style.display = 'block';
  addReviewButton.setAttribute('aria-expanded', true);
});
/**
 * Post review
 */

const postReviewButton = document.getElementById('post-review');
postReviewButton.addEventListener('click', e => {
  e.preventDefault();
  const name = document.getElementById('name');
  const comments = document.getElementById('comments');
  const rating = document.getElementById('rating'); // Validate review fields

  if (name.value === '' || comments.value === '' || rating.value === '') return;
  const review = {};
  review.name = name.value;
  review.rating = rating.value;
  review.comments = comments.value;
  review.date = moment().format('MMMM D, YYYY');
  review.synced = false; // Reset values

  name.value = '';
  comments.value = ''; // Fetch restaurant from DB

  DBHelper.fetchRestaurantById(self.restaurant.id, (error, restaurant) => {
    if (restaurant) {
      self.restaurant = restaurant;

      if (Array.isArray(self.restaurant.reviews)) {
        self.restaurant.reviews.push(review);
      } else {
        self.restaurant.reviews = [];
        self.restaurant.reviews.push(review);
      }

      DBHelper.updateRestaurantReviews(self.restaurant).then(result => {
        if (result) {
          const form = document.getElementById('submit-review');
          form.style.display = 'none';
          addReviewButton.setAttribute('aria-expanded', false);
          const toast = Toast.create({
            text: "Review submitted."
          });
          Toast.setTimeout(toast.id, 2000);
          fillReviewsHTML();
        }
      });
    }
  });
});
/**
 * Offline event handler
 */

window.addEventListener('offline', () => {
  const toast = Toast.create({
    text: "Unable to connect. Retrying..."
  });
  Toast.setTimeout(toast.id, 5000);
});
/**
 * Online event handler
 */

window.addEventListener('online', () => {
  const toast = Toast.create({
    text: "Syncing reviews..."
  });
  Toast.setTimeout(toast.id, 5000);
  DBHelper.syncReviews();
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlc3RhdXJhbnRfaW5mby5qcyJdLCJuYW1lcyI6WyJyZXN0YXVyYW50IiwibmV3TWFwIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJpbml0TWFwIiwicmVnaXN0ZXJTZXJ2aWNlV29ya2VyIiwiZmV0Y2hSZXN0YXVyYW50RnJvbVVSTCIsImVycm9yIiwiY29uc29sZSIsInNlbGYiLCJMIiwibWFwIiwiY2VudGVyIiwibGF0bG5nIiwibGF0IiwibG5nIiwiem9vbSIsInNjcm9sbFdoZWVsWm9vbSIsInRpbGVMYXllciIsIm1hcGJveFRva2VuIiwibWF4Wm9vbSIsImF0dHJpYnV0aW9uIiwiaWQiLCJhZGRUbyIsImZpbGxCcmVhZGNydW1iIiwiREJIZWxwZXIiLCJtYXBNYXJrZXJGb3JSZXN0YXVyYW50IiwiY2FsbGJhY2siLCJnZXRQYXJhbWV0ZXJCeU5hbWUiLCJmZXRjaFJlc3RhdXJhbnRCeUlkIiwiZmlsbFJlc3RhdXJhbnRIVE1MIiwibmFtZSIsImdldEVsZW1lbnRCeUlkIiwiaW5uZXJIVE1MIiwiYWRkcmVzcyIsInBpY3R1cmUiLCJjbGFzc05hbWUiLCJzcmMxIiwibWVkaWEiLCJzcmNzZXQiLCJpbWFnZVVybEJhc2VQYXRoIiwiaW1hZ2VOYW1lRm9yUmVzdGF1cmFudCIsInNyYzIiLCJpbWFnZSIsInNyYyIsImltYWdlVXJsRm9yUmVzdGF1cmFudCIsImFsdCIsImN1aXNpbmUiLCJjdWlzaW5lX3R5cGUiLCJvcGVyYXRpbmdfaG91cnMiLCJmaWxsUmVzdGF1cmFudEhvdXJzSFRNTCIsImZpbGxSZXZpZXdzSFRNTCIsIm9wZXJhdGluZ0hvdXJzIiwiaG91cnMiLCJrZXkiLCJyb3ciLCJjcmVhdGVFbGVtZW50IiwiZGF5IiwiYXBwZW5kQ2hpbGQiLCJ0aW1lIiwicmV2aWV3cyIsImNvbnRhaW5lciIsInJldmlld3NNc2ciLCJ1bCIsImZvckVhY2giLCJyZXZpZXciLCJjcmVhdGVSZXZpZXdIVE1MIiwibGkiLCJkaXYiLCJkYXRlIiwiYm9keSIsInJhdGluZyIsImNvbW1lbnRzIiwiYnJlYWRjcnVtYiIsInVybCIsIndpbmRvdyIsImxvY2F0aW9uIiwiaHJlZiIsInJlcGxhY2UiLCJyZWdleCIsIlJlZ0V4cCIsInJlc3VsdHMiLCJleGVjIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiYWRkUmV2aWV3QnV0dG9uIiwiZSIsInByZXZlbnREZWZhdWx0IiwiZm9ybSIsInN0eWxlIiwiZGlzcGxheSIsInNldEF0dHJpYnV0ZSIsInBvc3RSZXZpZXdCdXR0b24iLCJ2YWx1ZSIsIm1vbWVudCIsImZvcm1hdCIsInN5bmNlZCIsIkFycmF5IiwiaXNBcnJheSIsInB1c2giLCJ1cGRhdGVSZXN0YXVyYW50UmV2aWV3cyIsInRoZW4iLCJyZXN1bHQiLCJ0b2FzdCIsIlRvYXN0IiwiY3JlYXRlIiwidGV4dCIsInNldFRpbWVvdXQiLCJzeW5jUmV2aWV3cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsVUFBSjtBQUNBLElBQUlDLE1BQUo7QUFFQTs7OztBQUdBQyxRQUFRLENBQUNDLGdCQUFULENBQTBCLGtCQUExQixFQUErQ0MsS0FBRCxJQUFXO0FBQ3ZEQyxFQUFBQSxPQUFPO0FBQ1BDLEVBQUFBLHFCQUFxQjtBQUN0QixDQUhEO0FBS0E7Ozs7QUFHQUQsT0FBTyxHQUFHLE1BQU07QUFDZEUsRUFBQUEsc0JBQXNCLENBQUMsQ0FBQ0MsS0FBRCxFQUFRUixVQUFSLEtBQXVCO0FBQzVDLFFBQUlRLEtBQUosRUFBVztBQUFFO0FBQ1hDLE1BQUFBLE9BQU8sQ0FBQ0QsS0FBUixDQUFjQSxLQUFkO0FBQ0QsS0FGRCxNQUVPO0FBQ0xFLE1BQUFBLElBQUksQ0FBQ1QsTUFBTCxHQUFjVSxDQUFDLENBQUNDLEdBQUYsQ0FBTSxLQUFOLEVBQWE7QUFDekJDLFFBQUFBLE1BQU0sRUFBRSxDQUFDYixVQUFVLENBQUNjLE1BQVgsQ0FBa0JDLEdBQW5CLEVBQXdCZixVQUFVLENBQUNjLE1BQVgsQ0FBa0JFLEdBQTFDLENBRGlCO0FBRXpCQyxRQUFBQSxJQUFJ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dEYsUUFBUSxDQUFDK0IsY0FBVCxDQUF3QixlQUF4QixDQUFiO0FBQ0F1RCxVQUFBQSxJQUFJLENBQUNDLEtBQUwsQ0FBV0MsT0FBWCxHQUFxQixNQUFyQjtBQUVBTCxVQUFBQSxlQUFlLENBQUNNLFlBQWhCLENBQTZCLGVBQTdCLEVBQThDLEtBQTlDO0FBRUEsZ0JBQU1ZLEtBQUssR0FBR0MsS0FBSyxDQUFDQyxNQUFOLENBQWE7QUFDekJDLFlBQUFBLElBQUksRUFBRTtBQURtQixXQUFiLENBQWQ7QUFHQUYsVUFBQUEsS0FBSyxDQUFDRyxVQUFOLENBQWlCSixLQUFLLENBQUNoRixFQUF2QixFQUEyQixJQUEzQjtBQUVBNkIsVUFBQUEsZUFBZTtBQUNoQjtBQUNGLE9BZEQ7QUFlRDtBQUNGLEdBNUJEO0FBNkJELENBbkREO0FBcURBOzs7O0FBR0F3QixNQUFNLENBQUN6RSxnQkFBUCxDQUF3QixTQUF4QixFQUFtQyxNQUFNO0FBQ3ZDLFFBQU1vRyxLQUFLLEdBQUdDLEtBQUssQ0FBQ0MsTUFBTixDQUFhO0FBQ3pCQyxJQUFBQSxJQUFJLEVBQUU7QUFEbUIsR0FBYixDQUFkO0FBSUFGLEVBQUFBLEtBQUssQ0FBQ0csVUFBTixDQUFpQkosS0FBSyxDQUFDaEYsRUFBdkIsRUFBMkIsSUFBM0I7QUFDRCxDQU5EO0FBUUE7Ozs7QUFHQXFELE1BQU0sQ0FBQ3pFLGdCQUFQLENBQXdCLFFBQXhCLEVBQWtDLE1BQU07QUFDdEMsUUFBTW9HLEtBQUssR0FBR0MsS0FBSyxDQUFDQyxNQUFOLENBQWE7QUFDekJDLElBQUFBLElBQUksRUFBRTtBQURtQixHQUFiLENBQWQ7QUFHQUYsRUFBQUEsS0FBSyxDQUFDRyxVQUFOLENBQWlCSixLQUFLLENBQUNoRixFQUF2QixFQUEyQixJQUEzQjtBQUNBRyxFQUFBQSxRQUFRLENBQUNrRixXQUFUO0FBQ0QsQ0FORCIsInNvdXJjZXNDb250ZW50IjpbImxldCByZXN0YXVyYW50O1xudmFyIG5ld01hcDtcblxuLyoqXG4gKiBJbml0aWFsaXplIG1hcCBhcyBzb29uIGFzIHRoZSBwYWdlIGlzIGxvYWRlZC5cbiAqL1xuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIChldmVudCkgPT4geyAgXG4gIGluaXRNYXAoKTtcbiAgcmVnaXN0ZXJTZXJ2aWNlV29ya2VyKCk7XG59KTtcblxuLyoqXG4gKiBJbml0aWFsaXplIGxlYWZsZXQgbWFwXG4gKi9cbmluaXRNYXAgPSAoKSA9PiB7XG4gIGZldGNoUmVzdGF1cmFudEZyb21VUkwoKGVycm9yLCByZXN0YXVyYW50KSA9PiB7XG4gICAgaWYgKGVycm9yKSB7IC8vIEdvdCBhbiBlcnJvciFcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgIH0gZWxzZSB7ICAgICAgXG4gICAgICBzZWxmLm5ld01hcCA9IEwubWFwKCdtYXAnLCB7XG4gICAgICAgIGNlbnRlcjogW3Jlc3RhdXJhbnQubGF0bG5nLmxhdCwgcmVzdGF1cmFudC5sYXRsbmcubG5nXSxcbiAgICAgICAgem9vbTogMTYsXG4gICAgICAgIHNjcm9sbFdoZWVsWm9vbTogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgTC50aWxlTGF5ZXIoJ2h0dHBzOi8vYXBpLnRpbGVzLm1hcGJveC5jb20vdjQve2lkfS97en0ve3h9L3t5fS5qcGc3MD9hY2Nlc3NfdG9rZW49e21hcGJveFRva2VufScsIHtcbiAgICAgICAgbWFwYm94VG9rZW46ICdway5leUoxSWpvaWJHVnRZU0lzSW1FaU9pSmphbXQwWVhWbGEyTXdNM05qTTNkdlpIUTBOREl3Wm1WcEluMC5wT0VGYVBZNmVuQ2NoSUcyOUxvMlNRJyxcbiAgICAgICAgbWF4Wm9vbTogMTgsXG4gICAgICAgIGF0dHJpYnV0aW9uOiAnTWFwIGRhdGEgJmNvcHk7IDxhIGhyZWY9XCJodHRwczovL3d3dy5vcGVuc3RyZWV0bWFwLm9yZy9cIj5PcGVuU3RyZWV0TWFwPC9hPiBjb250cmlidXRvcnMsICcgK1xuICAgICAgICAgICc8YSBocmVmPVwiaHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LXNhLzIuMC9cIj5DQy1CWS1TQTwvYT4sICcgK1xuICAgICAgICAgICdJbWFnZXJ5IMKpIDxhIGhyZWY9XCJodHRwczovL3d3dy5tYXBib3guY29tL1wiPk1hcGJveDwvYT4nLFxuICAgICAgICBpZDogJ21hcGJveC5zdHJlZXRzJyAgICBcbiAgICAgIH0pLmFkZFRvKG5ld01hcCk7XG4gICAgICBmaWxsQnJlYWRjcnVtYigpO1xuICAgICAgREJIZWxwZXIubWFwTWFya2VyRm9yUmVzdGF1cmFudChzZWxmLnJlc3RhdXJhbnQsIHNlbGYubmV3TWFwKTtcbiAgICB9XG4gIH0pO1xufSAgXG4gXG4vKipcbiAqIEdldCBjdXJyZW50IHJlc3RhdXJhbnQgZnJvbSBwYWdlIFVSTC5cbiAqL1xuZmV0Y2hSZXN0YXVyYW50RnJvbVVSTCA9IChjYWxsYmFjaykgPT4ge1xuICBpZiAoc2VsZi5yZXN0YXVyYW50KSB7IC8vIHJlc3RhdXJhbnQgYWxyZWFkeSBmZXRjaGVkIVxuICAgIGNhbGxiYWNrKG51bGwsIHNlbGYucmVzdGF1cmFudClcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgaWQgPSBnZXRQYXJhbWV0ZXJCeU5hbWUoJ2lkJyk7XG4gIGlmICghaWQpIHsgLy8gbm8gaWQgZm91bmQgaW4gVVJMXG4gICAgZXJyb3IgPSAnTm8gcmVzdGF1cmFudCBpZCBpbiBVUkwnXG4gICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xuICB9IGVsc2Uge1xuICAgIERCSGVscGVyLmZldGNoUmVzdGF1cmFudEJ5SWQoaWQsIChlcnJvciwgcmVzdGF1cmFudCkgPT4ge1xuICAgICAgc2VsZi5yZXN0YXVyYW50ID0gcmVzdGF1cmFudDtcbiAgICAgIGlmICghcmVzdGF1cmFudCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZmlsbFJlc3RhdXJhbnRIVE1MKCk7XG4gICAgICBjYWxsYmFjayhudWxsLCByZXN0YXVyYW50KVxuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogQ3JlYXRlIHJlc3RhdXJhbnQgSFRNTCBhbmQgYWRkIGl0IHRvIHRoZSB3ZWJwYWdlXG4gKi9cbmZpbGxSZXN0YXVyYW50SFRNTCA9IChyZXN0YXVyYW50ID0gc2VsZi5yZXN0YXVyYW50KSA9PiB7XG4gIGNvbnN0IG5hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzdGF1cmFudC1uYW1lJyk7XG4gIG5hbWUuaW5uZXJIVE1MID0gcmVzdGF1cmFudC5uYW1lO1xuXG4gIGNvbnN0IGFkZHJlc3MgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzdGF1cmFudC1hZGRyZXNzJyk7XG4gIGFkZHJlc3MuaW5uZXJIVE1MID0gcmVzdGF1cmFudC5hZGRyZXNzO1xuXG4gIGNvbnN0IHBpY3R1cmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzdGF1cmFudC1waWN0dXJlJyk7XG4gIHBpY3R1cmUuY2xhc3NOYW1lID0gJ3Jlc3RhdXJhbnQtcGljdHVyZSc7XG5cbiAgY29uc3Qgc3JjMSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzb3VyY2UtMScpO1xuICBzcmMxLm1lZGlhID0gXCIobWluLXdpZHRoOiA3NTBweClcIlxuICBzcmMxLnNyY3NldCA9IGAke0RCSGVscGVyLmltYWdlVXJsQmFzZVBhdGh9JHtEQkhlbHBlci5pbWFnZU5hbWVGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpfS04MDBfbGFyZ2VfMXguanBnIDF4YDtcbiAgc3JjMS5zcmNzZXQgKz0gYCwke0RCSGVscGVyLmltYWdlVXJsQmFzZVBhdGh9JHtEQkhlbHBlci5pbWFnZU5hbWVGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpfS0xMjAwX2xhcmdlXzJ4LmpwZyAyeGA7XG5cbiAgY29uc3Qgc3JjMiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzb3VyY2UtMicpO1xuICBzcmMyLm1lZGlhID0gXCIobWluLXdpZHRoOiA1MDBweClcIlxuICBzcmMyLnNyY3NldCA9IGAke0RCSGVscGVyLmltYWdlVXJsQmFzZVBhdGh9JHtEQkhlbHBlci5pbWFnZU5hbWVGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpfS1tZWRpdW0uanBnYDtcblxuICBjb25zdCBpbWFnZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXN0YXVyYW50LWltZycpO1xuICBpbWFnZS5jbGFzc05hbWUgPSAncmVzdGF1cmFudC1pbWcnXG4gIGltYWdlLnNyYyA9IERCSGVscGVyLmltYWdlVXJsRm9yUmVzdGF1cmFudChyZXN0YXVyYW50KTtcbiAgaW1hZ2UuYWx0ID0gXCJJbWFnZSBvZiB0aGUgcmVzdGF1cmFudCBcIiArIHJlc3RhdXJhbnQubmFtZTtcblxuICBjb25zdCBjdWlzaW5lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc3RhdXJhbnQtY3Vpc2luZScpO1xuICBjdWlzaW5lLmlubmVySFRNTCA9IHJlc3RhdXJhbnQuY3Vpc2luZV90eXBlO1xuXG4gIC8vIGZpbGwgb3BlcmF0aW5nIGhvdXJzXG4gIGlmIChyZXN0YXVyYW50Lm9wZXJhdGluZ19ob3Vycykge1xuICAgIGZpbGxSZXN0YXVyYW50SG91cnNIVE1MKCk7XG4gIH1cbiAgLy8gZmlsbCByZXZpZXdzXG4gIGZpbGxSZXZpZXdzSFRNTCgpO1xufVxuXG4vKipcbiAqIENyZWF0ZSByZXN0YXVyYW50IG9wZXJhdGluZyBob3VycyBIVE1MIHRhYmxlIGFuZCBhZGQgaXQgdG8gdGhlIHdlYnBhZ2UuXG4gKi9cbmZpbGxSZXN0YXVyYW50SG91cnNIVE1MID0gKG9wZXJhdGluZ0hvdXJzID0gc2VsZi5yZXN0YXVyYW50Lm9wZXJhdGluZ19ob3VycykgPT4ge1xuICBjb25zdCBob3VycyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXN0YXVyYW50LWhvdXJzJyk7XG4gIGZvciAobGV0IGtleSBpbiBvcGVyYXRpbmdIb3Vycykge1xuICAgIGNvbnN0IHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XG5cbiAgICBjb25zdCBkYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgIGRheS5pbm5lckhUTUwgPSBrZXk7XG4gICAgcm93LmFwcGVuZENoaWxkKGRheSk7XG5cbiAgICBjb25zdCB0aW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICB0aW1lLmlubmVySFRNTCA9IG9wZXJhdGluZ0hvdXJzW2tleV07XG4gICAgcm93LmFwcGVuZENoaWxkKHRpbWUpO1xuXG4gICAgaG91cnMuYXBwZW5kQ2hpbGQocm93KTtcbiAgfVxufVxuXG4vKipcbiAqIENyZWF0ZSBhbGwgcmV2aWV3cyBIVE1MIGFuZCBhZGQgdGhlbSB0byB0aGUgd2VicGFnZS5cbiAqL1xuZmlsbFJldmlld3NIVE1MID0gKHJldmlld3MgPSBzZWxmLnJlc3RhdXJhbnQucmV2aWV3cykgPT4ge1xuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmV2aWV3cy1jb250YWluZXInKTtcbiAgY29uc3QgcmV2aWV3c01zZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXZpZXdzLW1lc3NhZ2UnKTtcblxuICBpZiAoIXJldmlld3MpIHtcbiAgICByZXZpZXdzTXNnLmlubmVySFRNTCA9ICdObyByZXZpZXdzIHlldCEnO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB1bCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXZpZXdzLWxpc3QnKTtcbiAgdWwuaW5uZXJIVE1MID0gJyc7XG4gIHJldmlld3NNc2cuaW5uZXJIVE1MID0gJyc7XG4gIHJldmlld3MuZm9yRWFjaChyZXZpZXcgPT4ge1xuICAgIHVsLmFwcGVuZENoaWxkKGNyZWF0ZVJldmlld0hUTUwocmV2aWV3KSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZSByZXZpZXcgSFRNTCBhbmQgYWRkIGl0IHRvIHRoZSB3ZWJwYWdlLlxuICovXG5jcmVhdGVSZXZpZXdIVE1MID0gKHJldmlldykgPT4ge1xuICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXYuY2xhc3NOYW1lID0gXCJyZXZpZXctaGVhZGVyXCI7XG4gIGxpLmFwcGVuZENoaWxkKGRpdik7XG5cbiAgY29uc3QgbmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gzJyk7XG4gIG5hbWUuaW5uZXJIVE1MID0gcmV2aWV3Lm5hbWU7XG4gIGRpdi5hcHBlbmRDaGlsZChuYW1lKTtcblxuICBjb25zdCBkYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICBkYXRlLmlubmVySFRNTCA9IHJldmlldy5kYXRlO1xuICBkYXRlLmNsYXNzTmFtZSA9IFwicmV2aWV3LWRhdGVcIjtcbiAgZGl2LmFwcGVuZENoaWxkKGRhdGUpO1xuXG4gIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgYm9keS5jbGFzc05hbWUgPSBcInJldmlldy1ib2R5XCI7XG4gIGxpLmFwcGVuZENoaWxkKGJvZHkpO1xuXG4gIGNvbnN0IHJhdGluZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgcmF0aW5nLmlubmVySFRNTCA9IGBSYXRpbmc6ICR7cmV2aWV3LnJhdGluZ31gO1xuICByYXRpbmcuY2xhc3NOYW1lID0gXCJyZXZpZXctcmF0aW5nXCJcbiAgYm9keS5hcHBlbmRDaGlsZChyYXRpbmcpO1xuXG4gIGNvbnN0IGNvbW1lbnRzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICBjb21tZW50cy5pbm5lckhUTUwgPSByZXZpZXcuY29tbWVudHM7XG4gIGJvZHkuYXBwZW5kQ2hpbGQoY29tbWVudHMpO1xuXG4gIHJldHVybiBsaTtcbn1cblxuLyoqXG4gKiBBZGQgcmVzdGF1cmFudCBuYW1lIHRvIHRoZSBicmVhZGNydW1iIG5hdmlnYXRpb24gbWVudVxuICovXG5maWxsQnJlYWRjcnVtYiA9IChyZXN0YXVyYW50PXNlbGYucmVzdGF1cmFudCkgPT4ge1xuICBjb25zdCBicmVhZGNydW1iID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JyZWFkY3J1bWInKTtcbiAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICBsaS5pbm5lckhUTUwgPSByZXN0YXVyYW50Lm5hbWU7XG4gIGJyZWFkY3J1bWIuYXBwZW5kQ2hpbGQobGkpO1xufVxuXG4vKipcbiAqIEdldCBhIHBhcmFtZXRlciBieSBuYW1lIGZyb20gcGFnZSBVUkwuXG4gKi9cbmdldFBhcmFtZXRlckJ5TmFtZSA9IChuYW1lLCB1cmwpID0+IHtcbiAgaWYgKCF1cmwpXG4gICAgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tcXFtcXF1dL2csICdcXFxcJCYnKTtcbiAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKGBbPyZdJHtuYW1lfSg9KFteJiNdKil8JnwjfCQpYCksXG4gICAgcmVzdWx0cyA9IHJlZ2V4LmV4ZWModXJsKTtcbiAgaWYgKCFyZXN1bHRzKVxuICAgIHJldHVybiBudWxsO1xuICBpZiAoIXJlc3VsdHNbMl0pXG4gICAgcmV0dXJuICcnO1xuICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHJlc3VsdHNbMl0ucmVwbGFjZSgvXFwrL2csICcgJykpO1xufVxuXG4vKipcbiAqIEV4cGFuZCBhZGQgcmV2aWV3ICBcbiAqL1xuY29uc3QgYWRkUmV2aWV3QnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FkZC1yZXZpZXcnKTtcbmFkZFJldmlld0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3VibWl0LXJldmlldycpO1xuICBmb3JtLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICBhZGRSZXZpZXdCdXR0b24uc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG59KTtcblxuLyoqXG4gKiBQb3N0IHJldmlld1xuICovXG5jb25zdCBwb3N0UmV2aWV3QnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bvc3QtcmV2aWV3Jyk7XG5wb3N0UmV2aWV3QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gIGUucHJldmVudERlZmF1bHQoKTtcbiAgXG4gIGNvbnN0IG5hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmFtZScpO1xuICBjb25zdCBjb21tZW50cyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb21tZW50cycpO1xuICBjb25zdCByYXRpbmcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmF0aW5nJyk7XG5cbiAgLy8gVmFsaWRhdGUgcmV2aWV3IGZpZWxkc1xuICBpZiAobmFtZS52YWx1ZSA9PT0gJycgfHwgY29tbWVudHMudmFsdWUgPT09ICcnIHx8IHJhdGluZy52YWx1ZSA9PT0gJycpIHJldHVybjtcblxuICBjb25zdCByZXZpZXcgPSB7fVxuICByZXZpZXcubmFtZSA9IG5hbWUudmFsdWU7XG4gIHJldmlldy5yYXRpbmcgPSByYXRpbmcudmFsdWU7XG4gIHJldmlldy5jb21tZW50cyA9IGNvbW1lbnRzLnZhbHVlO1xuICByZXZpZXcuZGF0ZSA9IG1vbWVudCgpLmZvcm1hdCgnTU1NTSBELCBZWVlZJyk7XG4gIHJldmlldy5zeW5jZWQgPSBmYWxzZTtcblxuICAvLyBSZXNldCB2YWx1ZXNcbiAgbmFtZS52YWx1ZSA9ICcnO1xuICBjb21tZW50cy52YWx1ZSA9ICcnO1xuXG4gIC8vIEZldGNoIHJlc3RhdXJhbnQgZnJvbSBEQlxuICBEQkhlbHBlci5mZXRjaFJlc3RhdXJhbnRCeUlkKHNlbGYucmVzdGF1cmFudC5pZCwgKGVycm9yLCByZXN0YXVyYW50KSA9PiB7XG4gICAgaWYgKHJlc3RhdXJhbnQpIHtcbiAgICAgIHNlbGYucmVzdGF1cmFudCA9IHJlc3RhdXJhbnQ7XG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHNlbGYucmVzdGF1cmFudC5yZXZpZXdzKSkge1xuICAgICAgICBzZWxmLnJlc3RhdXJhbnQucmV2aWV3cy5wdXNoKHJldmlldyk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc2VsZi5yZXN0YXVyYW50LnJldmlld3MgPSBbXTtcbiAgICAgICAgc2VsZi5yZXN0YXVyYW50LnJldmlld3MucHVzaChyZXZpZXcpO1xuICAgICAgfVxuXG4gICAgICBEQkhlbHBlci51cGRhdGVSZXN0YXVyYW50UmV2aWV3cyhzZWxmLnJlc3RhdXJhbnQpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3VibWl0LXJldmlldycpO1xuICAgICAgICAgIGZvcm0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgICAgICAgIGFkZFJldmlld0J1dHRvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSk7XG5cbiAgICAgICAgICBjb25zdCB0b2FzdCA9IFRvYXN0LmNyZWF0ZSh7XG4gICAgICAgICAgICB0ZXh0OiBcIlJldmlldyBzdWJtaXR0ZWQuXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBUb2FzdC5zZXRUaW1lb3V0KHRvYXN0LmlkLCAyMDAwKTtcblxuICAgICAgICAgIGZpbGxSZXZpZXdzSFRNTCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbi8qKlxuICogT2ZmbGluZSBldmVudCBoYW5kbGVyXG4gKi9cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvZmZsaW5lJywgKCkgPT4ge1xuICBjb25zdCB0b2FzdCA9IFRvYXN0LmNyZWF0ZSh7XG4gICAgdGV4dDogXCJVbmFibGUgdG8gY29ubmVjdC4gUmV0cnlpbmcuLi5cIlxuICB9KTtcblxuICBUb2FzdC5zZXRUaW1lb3V0KHRvYXN0LmlkLCA1MDAwKTtcbn0pO1xuXG4vKipcbiAqIE9ubGluZSBldmVudCBoYW5kbGVyXG4gKi9cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvbmxpbmUnLCAoKSA9PiB7XG4gIGNvbnN0IHRvYXN0ID0gVG9hc3QuY3JlYXRlKHtcbiAgICB0ZXh0OiBcIlN5bmNpbmcgcmV2aWV3cy4uLlwiXG4gIH0pO1xuICBUb2FzdC5zZXRUaW1lb3V0KHRvYXN0LmlkLCA1MDAwKTtcbiAgREJIZWxwZXIuc3luY1Jldmlld3MoKTtcbn0pIl0sImZpbGUiOiJyZXN0YXVyYW50X2luZm8uanMifQ==
